" ---------------------------------------------------------------------------------------
" Vim Settings
" ---------------------------------------------------------------------------------------

" Vim-Plug. Run :PlugUpdate to install or update plugins.
call plug#begin('~/.vim/vimplug')
Plug 'scrooloose/nerdtree'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'cespare/vim-toml'
Plug 'sirver/ultisnips'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
call plug#end()

" Allow backspace in insert mode.
set backspace=indent,eol,start

" Turn on syntax highlighting.
syntax enable

" Colorscheme.
colorscheme dusk
autocmd BufRead * :colorscheme dusk

" The default is 8 commands.
set history=9999

" Allow hidden buffers.
set hidden

" Load language plugins and indent files.
filetype plugin on
filetype indent on

" Indentation.
set autoindent          " Copy new-line indentation from the previous line.
set smartindent         " Insert extra level of indentation in some cases.
set breakindent         " Maintain visual indent when wrapping lines.

" Tabs.
set expandtab           " Insert spaces instead of tabs when the <tab> key is pressed.
set tabstop=4           " Number of spaces to insert, also display-with for <tab> characters.
set shiftwidth=4        " Autoindent size, also determines the operation of >> and ==.
set smarttab            " <BS> will delete a 'shiftwidth' worth of spaces at line start.

" Alternative to using the escape key.
" inoremap jj <esc>

" Shortcuts for navigating splits.
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-L> <C-W><C-L>

" Open new split panes to the right and to the bottom.
set splitbelow
set splitright

" Set custom filetypes.
autocmd BufNewFile,BufRead *.stx set filetype=syntext

" Use zsh highlighting for all shell scripts as the sh/bash highlighters are broken.
autocmd BufNewFile,BufRead *.sh set filetype=zsh

" Enable mouse support.
set mouse=a

" Turn off modelines.
set nomodeline

" Assume .tex files are latex by default.
let g:tex_flavor = "latex"

" Insert a blank line below the cursor in normal mode.
nnoremap <Enter> :call append(line('.'), '')<CR>

" Insert a blank line above the cursor in normal mode.
" (Won't work in terminals.)
nnoremap <S-Enter> :call append(line('.')-1, '')<CR>

" Show as much of the last line as possible when wrapping is enabled.
set display=lastline

" Clear the splash screen.
set shortmess+=I

" Enable italics in Mac Terminal.
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

" Highlight the current line.
set cursorline

" Create the cache directory if it doesn't already exist.
if !isdirectory($HOME . "/.cache/vim")
    call mkdir($HOME . "/.cache/vim", "p")
endif

" Relocate backup files, swap files, and undo files to a central location.
set backupdir=~/.cache/vim//
set directory=~/.cache/vim//
set undodir=~/.cache/vim//

" Exit from visual mode immediately after hitting the <esc> key.
set ttimeoutlen=0

" Recognize 0b and 0x as prefixes for binary and hex integers.
" Do not treat leading zeros as indicating octal.
set nrformats=bin,hex

" In command mode, make ctrl-p and ctrl-n match the existing prefix when
" scrolling backwards and forwards through the command history. The simplest
" way to achieve this is to map to the up and down keys which already have
" this behaviour:
"
"   cnoremap <C-P> <Up>
"   cnoremap <C-N> <Down>
"
" The additional code below is to preserve existing ctrl-p and ctrl-n
" behaviour in wildmenus.
cnoremap <expr> <C-P> wildmenumode() ? "\<C-P>" : "\<Up>"
cnoremap <expr> <C-N> wildmenumode() ? "\<C-N>" : "\<Down>"

" Show a vertical guideline for text width.
set colorcolumn=100

" Show line numbers.
set number

" Use the system clipboard as the unnamed (i.e. default) register.
set clipboard=unnamed

" Hard wrap lines at 100 characters.
" autocmd BufNewFile,BufRead *.txt setlocal textwidth=100
" autocmd BufNewFile,BufRead *.stx setlocal textwidth=100

" Show tabs.
set list
set listchars=tab:\|->

" ------------------------------------------------------------
" Search
" ------------------------------------------------------------

" Find the next match as the search term is being typed.
set incsearch

" Highlight search matches.
set hlsearch

" Automatically center matches on the screen.
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz

" ------------------------------------------------------------
" Finding Files
" ------------------------------------------------------------

" Set path to the directory of the current file, plus the current working
" directory and all subfolders.
set path=.,**

" Display all matching files on tab-complete.
set wildmenu
set wildignorecase
set wildmode=longest:list,full

" ------------------------------------------------------------
" Scrolling
" ------------------------------------------------------------

" Vertical scroll offset.
set scrolloff=1

" Horizontal scroll rate. The default is 0 which scrolls by half a screen.
set sidescroll=5

" Buffer scrolling with ctrl-n and ctrl-p. (By default they act just like j and k.)
nnoremap <C-N> <C-E>gj
nnoremap <C-P> <C-Y>gk

" ------------------------------------------------------------
" Leader Shortcuts
" ------------------------------------------------------------

" Remap the <leader> key for custom shortcuts.
let mapleader="\<space>"

" Stop highlighting the last search term. Highlighting will be re-enabled for
" the next search.
nnoremap <leader><space> :noh<cr>

" Alternate buffer. Swap back and forth between the latest buffers.
nnoremap <leader>a :b#<cr>

" FZF - fuzzy buffer finder.
nnoremap <leader>b :Buffers<cr>

" Change the word under the cursor, then change subsequent occurances by hitting dot.
" Can use 'n' to preview or skip over the next match.
"   *   -- search for the word under the cursor
"   ``  -- jump back to the first instance
"   c   -- operation: change
"   gn  -- motion: perform the operation on the next match
nnoremap <leader>c *``cgn

" Open the directory containing the current file.
nnoremap <leader>d :!open "%:p:h"<cr><cr>

" Edit the vimrc file.
nnoremap <leader>e :e ~/.vim/vimrc<cr>

" FZF - fuzzy file finder.
nnoremap <leader>f :Files<cr>

" Identify the syntax highlighting group under the cursor.
nnoremap <leader>h :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<cr>

" Save all open files, clear the screen, and run make.
nnoremap <leader>m :wa <bar> !clear -x && make

" Toggle between relative and absolute line numbering.
nnoremap <silent><leader>n :set relativenumber!<cr>

"Save and open the current file.
" nnoremap <leader>o :w <bar> !open "%:p"<cr>

" Toggle NerdTree file browser on and off.
nnoremap <leader>o :NERDTreeToggle<cr>

" Reload the vimrc file and redraw the screen.
nnoremap <leader>r :source ~/.vim/vimrc <bar> noh <bar> redraw<cr>

" Toggle spellcheck.
nnoremap <leader>s :set spell!<cr>

" Open a terminal window.
nnoremap <leader>t :term <cr><C-w>:res 25<cr>

" Toggle word-wrapping.
" nnoremap <leader>w :set wrap!<cr>
map <leader>w :call ToggleWrap()<CR>

" Save all open files, clear the screen, and execute the current file.
nnoremap <leader>x :wa <bar> !clear -x && "%:p"<cr>

" ------------------------------------------------------------
" File-Type Specific Leader Shortcuts
" ------------------------------------------------------------

" Latex: save all open files and compile 'main.tex'.
autocmd FileType tex,bib nmap <buffer> <leader>l :wa <bar> !latexmk --xelatex main && mv main.pdf output.pdf<cr>

" Latex: open the compiled pdf.
autocmd FileType tex,bib nmap <buffer> <leader>v :!open -a skim output.pdf<cr><cr>

" ------------------------------------------------------------
" Word Wrapping
" ------------------------------------------------------------

" Wrap lines at word boundaries.
set linebreak

let s:wrapenabled = 0
set nowrap

function! ToggleWrap()
    set wrap!
    if s:wrapenabled
        unmap j
        unmap k
        unmap 0
        unmap ^
        unmap $
        let s:wrapenabled = 0
    else
        nnoremap j gj
        nnoremap k gk
        nnoremap 0 g0
        nnoremap ^ g^
        nnoremap $ g$
        vnoremap j gj
        vnoremap k gk
        vnoremap 0 g0
        vnoremap ^ g^
        vnoremap $ g$
        let s:wrapenabled = 1
    endif
endfunction

call ToggleWrap()

" ------------------------------------------------------------
" Trim Whitespace
" ------------------------------------------------------------

fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

autocmd BufWritePre * :call TrimWhitespace()

" ------------------------------------------------------------
" Status Line
" ------------------------------------------------------------

" Always show the status line.
set laststatus=2

" Show the current command as we're typing it.
set showcmd

set statusline=%#StatusA4#%{&modified?'\ \ \ '.bufnr('%').'\ \ ':''}%#StatusA1#%{&modified?'':'\ \ \ '.bufnr('%').'\ \ '}%#StatusA2#\ \ %<%f\ \ %{&modified?'[+]\ \ ':''}%#StatusA3#%=%4l/%L\ \ %3v\ \ 0x%04B\ \ %{&fo}:%{&tw}\ \ %{&fenc?&fenc:&enc}\ \ %{&ff}\ \ %y\ %{'\ '}

augroup select_statusline
    autocmd!
    autocmd WinEnter,BufEnter * :setlocal statusline=%#StatusA4#%{&modified?'\ \ \ '.bufnr('%').'\ \ ':''}%#StatusA1#%{&modified?'':'\ \ \ '.bufnr('%').'\ \ '}%#StatusA2#\ \ %<%f\ \ %{&modified?'[+]\ \ ':''}%#StatusA3#%=%4l/%L\ \ %3v\ \ 0x%04B\ \ %{&fo}:%{&tw}\ \ %{&fenc?&fenc:&enc}\ \ %{&ff}\ \ %y\ %{'\ '}
    autocmd WinLeave * :setlocal statusline=%#StatusI1#\ \ %n\ \ %#StatusI2#\ \ %<%f\ \ %{&modified?'[+]\ \ ':''}%#StatusI3#%=%4l/%L\ \ %3v\ \ 0x%04B\ \ %{&fo}:%{&tw}\ \ %{&fenc?&fenc:&enc}\ \ %{&ff}\ \ %y\ %{'\ '}
augroup end

" ------------------------------------------------------------
" NERDTree
" ------------------------------------------------------------

" Close NT when opening a file.
let NERDTreeQuitOnOpen = 1

" Nicer UI.
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" Close Vim if the only window left is NT.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ------------------------------------------------------------
" UltiSnips
" ------------------------------------------------------------

let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

