" ---------------------------------------------------------------------------------------
" Vim Settings
" ---------------------------------------------------------------------------------------

" Vim-Plug. Run :PlugUpdate to install or update plugins.
call plug#begin('~/.vim/vimplug')
Plug 'scrooloose/nerdtree'
Plug '/usr/local/opt/fzf'
Plug 'cespare/vim-toml'
Plug 'sirver/ultisnips'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
call plug#end()

" Allow backspace in insert mode.
set backspace=indent,eol,start

" Turn on syntax highlighting.
syntax enable

" Colorscheme.
colorscheme dusk
autocmd BufRead * :colorscheme dusk

" The default is 8 commands.
set history=9999

" Reload files changed outside Vim.
set autoread
autocmd CursorHold,CursorHoldI,FocusGained,BufEnter,WinEnter * :checktime
set updatetime=1000

" Allow hidden buffers.
set hidden

" Indentation.
set autoindent
set smartindent
set smarttab
set shiftwidth=4
set tabstop=4
set expandtab

" Don't wrap lines.
set nowrap

" Load language plugins and indent files.
filetype plugin on
filetype indent on

" Alternative to using the escape key.
inoremap jj <esc>

" Wrap lines at word boundaries.
set linebreak

" Navigating splits.
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-H> <C-W><C-H>
nnoremap <C-L> <C-W><C-L>

" Open new split panes to the right and to the bottom.
set splitbelow
set splitright

" Set custom filetypes.
autocmd BufNewFile,BufRead *.stx set filetype=markdown
autocmd BufNewFile,BufRead *.sh set filetype=bash

" Enable mouse support.
set mouse=a

" Turn off modelines.
set nomodeline

" Assume .tex files are latex by default.
let g:tex_flavor = "latex"

" Insert blank lines in normal mode. Shift-Enter doesn't work in the terminal.
nnoremap <Enter> :call append(line('.'), '')<cr>
nnoremap <C-O> :call append(line('.')-1, '')<cr>

" Show as much of the last line as possible.
set display=lastline

" Clear the splash screen.
set shortmess+=I

" Move around in insert mode.
inoremap <c-a> <esc>0i
inoremap <c-e> <esc>A
inoremap <c-b> <esc>i
inoremap <c-f> <esc>2li
inoremap <c-j> <esc>gjli
inoremap <c-k> <esc>gkli

" ------------------------------------------------------------
" Search
" ------------------------------------------------------------

" Use case-sensitive search IFF the pattern contains uppercase letters.
set ignorecase
set smartcase

" Find the next match as the search term is being typed.
set incsearch

" Highlight search matches.
set hlsearch

" ------------------------------------------------------------
" Finding Files
" ------------------------------------------------------------

" Search into subfolders.
set path+=**

" Display all matching files on tab-complete.
set wildmenu
set wildignorecase
set wildmode=longest:list,full

" ------------------------------------------------------------
" Scrolling
" ------------------------------------------------------------

" Vertical scroll offset.
set scrolloff=1

" Horizontal scroll rate. The default is 0 which scrolls by half a screen.
set sidescroll=5

" Buffer scrolling with ctrl-n and ctrl-p.
nnoremap <c-n> <c-e>
nnoremap <c-p> <c-y>

" ------------------------------------------------------------
" Leader Shortcuts
" ------------------------------------------------------------

" Remap the <leader> key for custom shortcuts.
let mapleader="\<space>"

" Edit the vimrc file.
nnoremap <leader>e :e ~/.vim/vimrc<cr>

" Re-source the vimrc file.
nnoremap <leader>r :source ~/.vim/vimrc<cr>

" Toggle word-wrapping.
nnoremap <leader>w :set wrap!<cr>

" Toggle spellcheck.
nnoremap <leader>s :set spell!<cr>

" Fuzzy finder.
nnoremap <leader>f :FZF<cr>

" Save and execute the current file.
nnoremap <leader>x :w <bar> !"%:p"<cr>

"Save and open the current file.
nnoremap <leader>o :w <bar> !open "%:p"<cr>

" Open the directory containing the current file.
nnoremap <leader>d :!open "%:p:h"<cr>

" Identify the syntax highlighting group under the cursor.
nnoremap <leader>h :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<cr>

" Buffer selector. Type a number or unique partial name.
nnoremap <leader>b :ls<cr>:b<space>

" Alternate buffer. Swap back and forth between buffers.
nnoremap <leader>a :b#<cr>

" Change a word, then change the next occurance of it by hitting dot.
nnoremap <leader>c *``cgn

" ------------------------------------------------------------
" File-Type Specific Leader Shortcuts
" ------------------------------------------------------------

" Latex: save all open files and compile 'main.tex'.
autocmd FileType tex,bib nmap <buffer> <leader>l :wa <bar> !latexmk --xelatex main && mv main.pdf output.pdf<cr>

" Latex: open the compiled pdf.
autocmd FileType tex,bib nmap <buffer> <leader>v :!open -a skim output.pdf<cr><cr>

" Save and interpret the current file.
autocmd FileType python nmap <buffer> <leader>i :w <bar> !python "%:p"<cr>

" ------------------------------------------------------------
" Trim Whitespace
" ------------------------------------------------------------

fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

autocmd BufWritePre * :call TrimWhitespace()

" ------------------------------------------------------------
" Status Line
" ------------------------------------------------------------

" Always show the status line.
set laststatus=2

" Show the current command as we're typing it.
set showcmd

set statusline=%#StatusA4#%{&modified?'\ \ \ '.bufnr('%').'\ \ ':''}%#StatusA1#%{&modified?'':'\ \ \ '.bufnr('%').'\ \ '}%#StatusA2#\ \ %<%f\ \ %{&modified?'[+]\ \ ':''}%#StatusA3#%=%4l/%L\ \ %3v\ \ 0x%04B\ \ %{&fo}\ \ %{&fenc?&fenc:&enc}\ \ %{&ff}\ \ %y\ %{'\ '}

augroup select_statusline
    autocmd!
    autocmd WinEnter,BufEnter * :setlocal statusline=%#StatusA4#%{&modified?'\ \ \ '.bufnr('%').'\ \ ':''}%#StatusA1#%{&modified?'':'\ \ \ '.bufnr('%').'\ \ '}%#StatusA2#\ \ %<%f\ \ %{&modified?'[+]\ \ ':''}%#StatusA3#%=%4l/%L\ \ %3v\ \ 0x%04B\ \ %{&fo}\ \ %{&fenc?&fenc:&enc}\ \ %{&ff}\ \ %y\ %{'\ '}
    autocmd WinLeave * :setlocal statusline=%#StatusI1#\ \ %n\ \ %#StatusI2#\ \ %<%f\ \ %{&modified?'[+]\ \ ':''}%#StatusI3#%=%4l/%L\ \ %3v\ \ 0x%04B\ \ %{&fo}\ \ %{&fenc?&fenc:&enc}\ \ %{&ff}\ \ %y\ %{'\ '}
augroup end

" ------------------------------------------------------------
" Line Numbers
" ------------------------------------------------------------

" Turn on line numbers and relative line numbers.
set number
set relativenumber

" Show absolute line numbers when in insert mode.
autocmd InsertEnter * :set norelativenumber
autocmd InsertLeave * :set relativenumber

" Show absolute line numbers when we lose the focus. GUI only.
autocmd FocusLost * :set norelativenumber
autocmd FocusGained * :set relativenumber

" Toggle between relative and absolute line numbering.
nnoremap <silent><leader>n :set relativenumber!<cr>

" ------------------------------------------------------------
" Clipboard
" ------------------------------------------------------------

" Default to using the system clipboard instead of register 0.
set clipboard=unnamed

" ------------------------------------------------------------
" NERDTree
" ------------------------------------------------------------

" Toggle NT on and off.
nnoremap <leader>t :NERDTreeToggle<cr>

" Close NT when opening a file.
let NERDTreeQuitOnOpen = 1

" Nicer UI.
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" Close Vim if the only window left is NT.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ------------------------------------------------------------
" UltiSnips
" ------------------------------------------------------------

let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

