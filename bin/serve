#!/usr/bin/env python3
# --------------------------------------------------------------------------
# Serve a directory using Python's builtin web server.
#
# Author: Darren Mulholland <darren@mulholland.xyz>
# License: Public Domain
# --------------------------------------------------------------------------

import os
import http.server
import sys
import webbrowser
import sys
import dotclio


helptext = """
Usage: %s [FLAGS] [OPTIONS] [ARGUMENTS]

  Serve a directory using Python's builtin web server.

  Host IP defaults to localhost (127.0.0.1). Specify an IP address to serve
  only on that address or '0.0.0.0' to serve on all available IPs.

  Port number defaults to 0 which randomly selects an available port. Note
  that port numbers below 1024 require root authorization.

Arguments:
  [dirpath]           Directory to serve. Defaults to the current directory.

Options:
  -h, --host <str>    Host IP address. Defaults to localhost.
  -p, --port <int>    Port number. Defaults to 0, i.e. random.

Flags:
  -b, --browser       Launch the default web browser.
      --help          Print the application's help text and exit.

""" % os.path.basename(sys.argv[0])


def main():
    parser = dotclio.ArgParser(helptext)

    parser.add_flag("browser b")
    parser.add_str("host h", "localhost")
    parser.add_int("port p", 0)

    parser.parse()

    if parser.has_args():
        if os.path.isdir(parser.get_arg(0)):
            os.chdir(parser.get_arg(0))
        else:
            sys.exit("Error: '%s' is not a directory." % parser.get_arg(0))

    serve(parser["host"], parser["port"], parser["browser"])


def serve(host, port, browser):
    try:
        server = http.server.HTTPServer(
            (host, port),
            http.server.SimpleHTTPRequestHandler
        )
    except PermissionError:
        sys.exit("Error: use 'sudo' to run on a port below 1024.")
    except OSError:
        sys.exit("Error: address already in use. Choose a different port.")

    address = server.socket.getsockname()

    print("-" * 80)
    print("Root: %s" % os.path.abspath(os.getcwd()))
    print("Host: %s" % address[0])
    print("Port: %s" % address[1])
    print("Stop: Ctrl-C")
    print("-" * 80)

    if browser:
        webbrowser.open("http://%s:%s" % (host, address[1]))

    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\n" + "-" * 80 + "Stopping server...\n" + "-" * 80)
        server.server_close()


if __name__ == "__main__":
    main()
