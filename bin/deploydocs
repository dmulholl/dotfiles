#!/usr/bin/env python3
# --------------------------------------------------------------------------
# Deploy project documentation.
# --------------------------------------------------------------------------

import sys
import os
import shutil
import subprocess
import argslib


helptext = """
Usage: ddocs

    Deploy project documentation to: .../<project-name>/<branch-name>/.

Options:
  -b, --branch <name>       Use custom branch name.
  -p, --project <name>      Use custom project name.

Flags:
  -h, --help                Print helptext.
""".strip()


def find_project_dir():
    join, isdir, isfile = os.path.join, os.path.isdir, os.path.isfile
    path = os.getcwd()
    while isdir(path):
        if isdir(join(path, 'docs')):
            if isdir(join(path, 'docs', 'src')):
                if isdir(join(path, 'docs', 'out')):
                    return os.path.abspath(path)
        path = join(path, '..')
    sys.exit("Error: cannot locate project directory.")


def termline():
    cols, _ = shutil.get_terminal_size()
    line = '\u001B[90m' + 'â”€' * cols + '\u001B[0m'
    print(line)


def main():
    argparser = argslib.ArgParser(helptext)
    argparser.option("branch b")
    argparser.option("project p")
    argparser.parse()

    project_dir = find_project_dir()
    project_name = argparser.value("project") or os.path.basename(project_dir).lower()

    src_dir = os.path.join(project_dir, 'docs', 'out')
    if not os.path.isdir(src_dir):
        sys.exit(f"Error: cannot locate documentation directory: '{src_dir}'.")

    branch_output = subprocess.check_output(["git","symbolic-ref", "--short", "HEAD"])
    branch_name = argparser.value("branch") or branch_output.decode("utf8").strip()

    dst_local = f"{os.getenv('HOME')}/dev/web/dmulholl.com/res/docs/{project_name}/{branch_name}"
    dst_remote = f"dmulholl@www.dmulholl.com:/var/www/dmulholl.com/docs/{project_name}/{branch_name}"

    termline()
    print('Source:       ', src_dir)

    print('Copying to:   ', dst_local)
    if os.path.isdir(dst_local):
        shutil.rmtree(dst_local)
    shutil.copytree(src_dir, dst_local)

    print('Uploading to: ', dst_remote)
    termline()
    args = ['rsync', '-avz', '--delete', f'{src_dir}/', dst_remote]
    subprocess.call(args)
    termline()


if __name__ == "__main__":
    main()
