#!/usr/bin/env pyro

import std::fs;
import std::cmd;
import std::args;


var helptext = "
Usage: ddx

  Deploys documentation to: DEST/<project-name>/<branch-name>/

Options:
  -b, --branch <name>       Use custom branch name.
  -p, --project <name>      Use custom project name.

Flags:
  -h, --help                Print this helptext.
";


def term_width() -> i64 {
    var result = $stderr:get_terminal_size();
    if $is_err(result) {
        return 80;
    }

    return result[0];
}


def find_project_dir() -> str|err {
    var dirpath = fs::getcwd();

    while fs::is_dir(dirpath) {
        if fs::is_dir(fs::join(dirpath, "docs", "out")) {
            return fs::abspath(dirpath);
        }
        dirpath = fs::join(dirpath, "..");
    }

    return $err();
}


def $main() {
    let parser = args::ArgParser()
        :helptext(helptext)
        :option("branch b")
        :option("project p");

    if let result = parser:parse(); $is_err(result) {
        $exit("error: ${result}");
    }

    var project_path = find_project_dir();
    if $is_err(project_path) {
        $exit("error: unable to locate the project directory");
    }

    var project_name = parser:value("project") ?? fs::basename(project_path);

    var current_branch_name = try $("git symbolic-ref --short HEAD");
    if $is_err(current_branch_name) {
        $exit("error: ${current_branch_name}");
    }

    var branch_name = parser:value("branch") ?? current_branch_name:strip();

    var src = fs::join(project_path, "docs", "out");
    var dst_local = "${$env("HOME")}/dev/web/dmulholl.com/res/docs/${project_name}/${branch_name}";
    var dst_server = "dmulholl@www.dmulholl.com:/var/www/dmulholl.com/docs/${project_name}/${branch_name}";

    echo "─" * term_width();
    echo "Source:       ${src}";
    echo "Copying to:   ${dst_local}";

    if fs::is_dir(dst_local) {
        cmd::rm(dst_local);
    }

    if let result = try $("mkdir -p '${dst_local}'"); $is_err(result) {
        $exit("error: ${result}");
    }

    if let result = try $("cp -r '${src}/.' '${dst_local}'"); $is_err(result) {
        $exit("error: ${result}");
    }

    echo "Uploading to: ${dst_server}";

    if let result = try $("rsync -avz --delete ${src}/ ${dst_server}"); $is_err(result) {
        $exit("error: ${result}");
    }

    echo "─" * term_width();
}
